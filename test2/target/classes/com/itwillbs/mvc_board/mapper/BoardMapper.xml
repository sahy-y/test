<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 매핑에 사용될 BoardMapper 인터페이스를 namespace 속성에 지정 필수! -->
<mapper namespace="com.itwillbs.mvc_board.mapper.BoardMapper">
	<!-- 게시물 등록 작업 - INSERT -->
	<!-- 
	단, 글번호(board_num) 컬럼이 일반 정수 컬럼이며 자동 증가 컬럼이 아니므로 직접 글번호 생성 필요
	이 때, 기존 게시물 번호 중 가장 큰 번호를 조회 후 + 1 값을 새 글 번호, 참조글 번호로 사용
	=> INSERT, UPDATE 태그 등에서 SELECT 구문 조회 결과값을 활용해야할 경우
	   <selectKey> 태그를 <insert> 등의 태그 내에서 사용하여 작업 전 또는 후에 값 조회 가능
	   - keyProperty 속성 : 조회 결과값을 저장할 속성(VO 객체 변수명 지정 가능)
	                        => 조회 후 자동으로 해당 객체의 변수(또는 일반 변수)에 저장됨
	                        => BoardVO 객체를 전달받았으므로 board_num 변수 직접 지정 가능
	   - resultType 속성 : 조회 결과에 대한 데이터 타입
	   - order 속성 : 작업 수행 시점 지정(작업 전 조회 수행 시 BEFORE, 작업 후 조회 수행 시 AFTER)
	=> 주의! MAX() 함수 사용 시 대상이 존재하지 않을 경우 NULL 값이 리턴되므로 사용 시 오류 발생함
	   따라서, IFNULL 함수 추가(NULL 일 때 기본값 0 로 설정)
	=> 전달받은 BoardVO 객체의 멤버변수에 selectKey 조회 결과값을 저장할 경우
	   해당 객체를 공유하는 다른 클래스에서 조회된 값 사용 가능
	-->
	<insert id="insertBoard">
		<selectKey keyProperty="board_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(board_num), 0)
			FROM board
		</selectKey>
		INSERT
		INTO board
		VALUES (
			#{board_num} + 1 -- 미리 조회된 게시물 번호 + 1 값 사용
			, #{board_name}
			, #{board_subject}
			, #{board_content}
			, #{board_file1}
			, #{board_file2}
			, #{board_file3}
			, #{board_file}
			, #{board_num} + 1 -- board_re_ref(board_num 값과 동일하게 지정)
			, 0
			, 0
			, 0
			, now()
			, #{writer_ip}
		)
	</insert>
	
	<!-- 글 목록 조회 - SELECT -->
	<select id="selectBoardList" resultType="board">
		SELECT *
		FROM board 
		<!-- FROM 절 이후 동적 SQL 활용하여 검색타입과 검색어에 따른 WHERE 절 다르게 추가 -->
		<!-- 
		[ 동적 SQL 문 ]
		- 어떤 조건에 따라 실행할 SQL 문장이 다른 SQL 구문
		- JSTL 에서 조건에 따라 문장을 다르게 실행하는 것과 거의 동일
		  <c:if>, <c:choose><c:when><c:otherwise> => c: 제거하면 거의 동일
		
		조건1) 검색어(searchKeyword)가 널스트링이 아닐 때 WHERE 절 추가 => if 태그 필요
		조건2) 검색어가 있을 경우 검색타입(searchType)에 따라 컬럼명 다르게 검색
		       => 복수개의 조건에 따른 동적 SQL문을 작성하기 위해 choose, when, otherwise 태그 필요 
		
		< 주의 사항 >
		MySQL 의 경우 WHERE 에 LIKE 절 조합하여 검색 데이터를 포함하는 레코드 검색 시
		LIKE '%검색데이터%' 형식으로 지정해야한다.
		이 때, 마이바티스에서 표현 시 LIKE '%#{검색데이터}%' 형식으로 지정할 경우 오류 발생
		=> 마이바티스에서 #{데이터} 형식은 자동으로 해당 데이터타입을 감지하여 후처리 수행
		   ex) 문자열일 경우 자동으로 해당 데이터에 '' 기호를 붙여서 문자열 파라미터로 표기
		   따라서, '%#{검색데이터}%' 형식으로 지정 시 '%'검색데이터'%' 형태로 변경되어 오류 발생함
		=> 이런 경우 데이터타입을 감지하지 않도록 #{} 대신 ${} 로 파라미터 지정 가능
		   ${} 사용 시 전달받은 데이터 형태 그대로 SQL 문장에 전달함
		   단, 데이터타입 검증이 수행되지 않으므로 SQL 삽입 공격 등 보안 취약점이 발생할 수 있으므로
		   사용자 입력 데이터는 가급적 ${} 보다 #{} 사용하도록 권장됨!
		=> 결론> 테이블명, LIKE 절 등에 전달되는 데이터는 ${} 사용하고
		         외부로부터 입력받는 대부분의 데이터는 #{} 사용하자!
		=> 결론2> LIKE 절에 % 결합 시 CONCAT() 함수 활용하자!
		-->
		<!-- 1. 검색어(searchKeyword) 가 널스트링이 아닐 때 검색어 추가할 WHERE 절 추가 -->
		<!-- => 검색어 데이터는 searchKeyword 변수에 저장되어 있으므로 변수명 그대로 활용 -->
		<!-- => 자바 문법과 동일하게 문자열 비교를 equals() 메서드로 수행 -->		
		<if test="!searchKeyword.equals('')">
			WHERE
			<!-- 2. 검색타입(searchType)에 따른 WHERE 절 조건 대상 변경 -->
			<!-- => searchType 변수의 문자열 비교(subject, content, subject_content, name) -->
			<choose>
				<when test="searchType.equals('subject')">
					<!-- 주의! LIKE 절은 주로 % 기호와 결합하여 문장 포함 여부를 탐색하기 때문에 -->
					<!-- 주로 '%검색어%' 형식으로 사용해야한다. -->
					<!-- 이 때, #{파라미터명} 형식으로 지정 시 타입 감지로 인해 문자열은 강제로 "" 기호가 붙음 -->
					<!-- 따라서, '%"검색어"%' 형식이 되어 문법 오류 발생하므로 타입 감지를 하지 않도록 -->
					<!-- ${파라미터명} 형식으로 지정해야한다! -->
<!-- 					board_subject LIKE '%#{searchKeyword}%' --> <!-- '%"검색어"%' -->
<!-- 					board_subject LIKE '%${searchKeyword}%' --> <!-- '%검색어%' -->
					<!-- CONCAT() 함수 사용하여 % 기호와 데이터 결합도 가능 -->
					board_subject LIKE CONCAT('%',#{searchKeyword},'%')
				</when>
				<when test="searchType.equals('content')">
<!-- 					board_content LIKE '%${searchKeyword}%' -->
					board_content LIKE CONCAT('%',#{searchKeyword},'%')
				</when>
				<when test="searchType.equals('subject_content')">
					<!-- 제목&내용으로 검색 시 둘 중 하나의 조건만 만족하면 되므로 OR 조건 결합 -->
<!-- 					board_subject LIKE '%${searchKeyword}%' -->
<!-- 					OR board_content LIKE '%${searchKeyword}%' -->
					board_subject LIKE CONCAT('%',#{searchKeyword},'%')
					OR board_content LIKE CONCAT('%',#{searchKeyword},'%')
				</when>
				<when test="searchType.equals('name')">
<!-- 					board_name LIKE '%${searchKeyword}%' -->
<!-- 					board_name LIKE CONCAT('%',#{searchKeyword},'%') -->
					<!-- 단, 작성자는 정확히 일치하는 아이디만 검색하기 위해 % 제거 -->
					board_name LIKE #{searchKeyword}
				</when>
				<otherwise>
					1=1 -- WHERE 절을 포함하되 조건을 걸고 싶지 않을 경우 활용 가능한 조건식
				</otherwise>
			</choose>
		</if>
		ORDER BY
			board_re_ref DESC
			, board_re_seq ASC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<!-- 전체 글 목록 갯수 조회 - SELECT -->
	<select id="selectBoardListCount" resultType="int">
		SELECT COUNT(*)
		FROM board
	</select>
	
	<!-- 글 상세정보 조회 - SELECT -->
	<select id="selectBoard" resultType="board">
		SELECT *
		FROM board
		WHERE board_num = #{board_num}
	</select>
	
	<!-- 글 조회수 증가 - UPDATE -->
	<!-- <selectKey> 활용하여 조회수 증가 후 board_readcount 값을 조회하여 BoardVO 객체에 저장 -->
	<!-- 이 때, 조회 결과값을 저장할 변수가 파라미터로 전달받은 객체 멤버변수와 동일할 경우 -->
	<!-- 변수명 keyProperty 속성값으로 지정 시 자동으로 해당 객체 내의 멤버변수에 저장 -->
	<update id="updateReadcount">
		<!-- selectKey 태그의 위치와 상관없이 order 속성값에 따라 실행 순서가 결정됨 -->
		<selectKey keyProperty="board_readcount" resultType="int" order="AFTER">
			SELECT board_readcount
			FROM board
			WHERE board_num = #{board_num}
		</selectKey>
		UPDATE board
		SET board_readcount = board_readcount + 1
		WHERE board_num = #{board_num}
	</update>
	
	<!-- 글 삭제 - DELETE -->
	<delete id="deleteBoard">
		DELETE FROM board	
		WHERE board_num = #{board_num}
	</delete>
	
	<!-- 일치하는 레코드 내의 파일명 삭제(널스트링으로 값 수정) - UPDATE -->
	<!-- 1) 동적 SQL 활용하여 해당 파일명 존재 여부 판별 -->
	<!-- 2) SQL 구문을 활용하여 SET 절에 CASE 를 결합하여 해당 문자열 존재 여부 판별 -->
	<!--    board_file1 ~ 3 의 파일명이 전달받은 board_file1 과 같으면 '', 아니면 기존 파일명 그대로 사용 -->
	<!--    SET [변경할컬럼명] = CASE WHEN [조건식] THEN [true일때설정할값] ELSE [false일때설정할값] END -->
	<update id="updateBoardFile">
		UPDATE board
		SET
			board_file1 = CASE WHEN board_file1 = #{board_file1} THEN '' ELSE board_file1 END,
			board_file2 = CASE WHEN board_file2 = #{board_file1} THEN '' ELSE board_file2 END,
			board_file3 = CASE WHEN board_file3 = #{board_file1} THEN '' ELSE board_file3 END
		WHERE 
			board_num = #{board_num}
	</update>
	
	<!-- 글 수정 - UPDATE -->
	<!-- 제목, 내용은 무조건 수정하고, 파일명 3개(board_fileX)중 비어있지 않은 항목만 컬럼값 변경 -->
	<!-- 즉, 파일명 3개를 각각 비교하여 비어있지 않을 경우(null 또는 "" 이 아님)에만 SET 절에 추가 -->
	<update id="updateBoard">
		UPDATE board
		SET
			board_subject = #{board_subject}
			, board_content = #{board_content}
			<if test="board_file1 != null and !board_file1.equals('')">
				, board_file1 = #{board_file1}
			</if>
			<if test="board_file2 != null and !board_file2.equals('')">
				, board_file2 = #{board_file2}
			</if>
			<if test="board_file2 != null and !board_file3.equals('')">			
				, board_file3 = #{board_file3}
			</if>
		WHERE
			board_num = #{board_num}
	</update>
	
	<!--
	기존 답글 순서번호 조정 - UPDATE
	=> 참조글번호(board_re_ref)가 대상글의 참조글번호와 같고
	   순서번호(board_re_seq)가 대상글의 순서번호보다 큰 레코드들의 순서번호를 1씩 증가(+1) 처리
	-->
	<update id="updateBoardReSeq">
		UPDATE board
		SET
			board_re_seq = board_re_seq + 1
		WHERE
			board_re_ref = #{board_re_ref}
			AND board_re_seq > #{board_re_seq}
	</update>
	
	<!-- 답글 등록 - INSERT -->
	<!-- 
	기본 새 글 등록과 대부분 동일하나, 참조글번호는 전달받은 값 그대로 사용하고
	순서번호와 들여쓰기레벨 값은 전달받은 값 + 1 값 사용
	-->
	<insert id="insertReplyBoard">
		<selectKey keyProperty="board_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(board_num), 0)
			FROM board
		</selectKey>
		INSERT
		INTO board
		VALUES (
			#{board_num} + 1 -- 미리 조회된 게시물 번호 + 1 값 사용
			, #{board_name}
			, #{board_subject}
			, #{board_content}
			, #{board_file1}
			, #{board_file2}
			, #{board_file3}
			, #{board_file}
			, #{board_re_ref}       -- board_re_ref(전달받은 값 사용)
			, #{board_re_lev} + 1   -- board_re_lev(전달받은 값 + 1)
			, #{board_re_seq} + 1   -- board_re_seq(전달받은 값 + 1)
			, 0
			, now()
			, #{writer_ip}
		)
	</insert>
	
	<!-- 댓글 쓰기 - INSERT -->
	<insert id="insertTinyReplyBoard">
		<!-- 새 댓글 번호 계산 -->
		<selectKey keyProperty="reply_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(reply_num), 0)
			FROM tiny_reply_board
		</selectKey>
		INSERT
		INTO tiny_reply_board
		VALUES (
			#{reply_num} + 1    -- reply_num(selectKey 로 조회된 값 활용)
			, #{board_num}      -- board_num(전달받은 값 사용)
			, #{reply_name}     -- reply_name(전달받은 값 사용)
			, #{reply_content}  -- reply_content(전달받은 값 사용)
			, #{reply_num} + 1  -- 참조글번호(reply_re_ref)(새 댓글 번호와 동일하게 지정)
			, 0                 -- 들여쓰기레벨(새 댓글이므로 기본값 0)
			, 0                 -- 순서번호(새 댓글이므로 기본값 0)
			, now()             -- reply_date
		);
	</insert>
	
	<!-- 댓글 목록 조회 - SELECT -->
	<!-- 작성된 댓글 순으로 정렬 -->
	<!-- 참조글번호 - 오름차순, 순서번호 - 오름차순 => 새 댓글이 아래쪽으로 위치하도록 -->
	<select id="selectTinyReplyBoardList" resultType="map">
		SELECT *
		FROM tiny_reply_board
		WHERE 
			board_num = #{board_num}
		ORDER BY
			reply_re_ref ASC
			, reply_re_seq ASC
	</select>
	
	<!-- 댓글 작성자 조회 - SELECT -->
	<!-- 단, 조회 결과를 동일한 Map 객체에 저장하기 위해 댓글번호도 함께 조회(생략 시 작성자만 저장됨) -->
	<select id="selectTinyReplyWriter" resultType="map">
		SELECT 
			reply_num
			, reply_name
		FROM tiny_reply_board
		WHERE
			reply_num = #{reply_num}
	</select>
	
	<!-- 댓글 삭제 - DELETE -->
	<delete id="deleteTinyReplyBoard">
		DELETE
		FROM tiny_reply_board
		WHERE
			reply_num = #{reply_num}
	</delete>
	
	<!-- 
	기존 댓글 순서번호 조정 - UPDATE
	=> 대상글번호(board_num)가 전달받은 번호와 같고,
	   참조글번호(reply_re_red)가 대상글의 참조글번호와 같고,
	   순서번호(reply_re_seq)가 대상글의 순서번호보다 큰 레코드들의
	   순서번호 1씩 증가 처리
	-->
	<update id="updateTinyReplyBoardSeq">
		UPDATE tiny_reply_board
		SET
			reply_re_seq = reply_re_seq + 1
		WHERE
			board_num = #{board_num}
			AND reply_re_ref = #{reply_re_ref}
			AND reply_re_seq > #{reply_re_seq}
	</update>
	
	<!-- 
	대댓글 등록 - INSERT
	=> 기본 작업은 댓글 등록과 동일
	=> 참조글번호는 전달받은 번호 사용
	   들여쓰기레벨과 순서번호는 전달받은 값 + 1
	-->
	<insert id="insertTinyReReplyBoard">
		<!-- 새 댓글 번호 계산 -->
		<!-- 대댓글을 순서대로 나열하기 위해 기존 댓글 그룹에서 가장 큰 순서번호 조회 추가-->
<!-- 		<selectKey keyProperty="reply_num" resultType="int" order="BEFORE"> -->
<!-- 			SELECT IFNULL(MAX(reply_num), 0) -->
<!-- 			FROM tiny_reply_board -->
<!-- 		</selectKey> -->
		
		<!--  -->
		<!-- 
		2개 이상의 값을 조회하여 새로운 Map 객체에 저장(이름을 result 로 지정)
		=> 기존 reply_num 의 가장 큰 값 조회 시에는 WHERE 절이 불필요하지만
		   추가되는 reply_re_seq 의 가장 큰 값 조회 시에는 WHERE 절이 필요하다
		   따라서, 별도의 서브쿼리를 사용하여 조건을 추가해야함
		-->
		<selectKey keyProperty="result" resultType="map" order="BEFORE">
			SELECT 
				IFNULL(MAX(reply_num), 0) AS reply_num
				, (
					SELECT 
						IFNULL(MAX(reply_re_seq), 0) 
					FROM tiny_reply_board
					WHERE 
						board_num = #{board_num}
						AND reply_re_ref = ${reply_re_ref}
				) AS reply_re_seq
			FROM tiny_reply_board
		</selectKey>
		
		<!-- selectKey 를 통해 조회된 복수개의 값은 result 라는 이름으로 관리됨 -->
		INSERT
		INTO tiny_reply_board
		VALUES (
			#{result.reply_num} + 1        -- reply_num(selectKey 로 조회된 값 + 1)
			, #{board_num}                 -- board_num(전달받은 값 사용)
			, #{reply_name}                -- reply_name(전달받은 값 사용)
			, #{reply_content}             -- reply_content(전달받은 값 사용)
			, #{reply_re_ref}              -- 참조글번호(reply_re_ref)(전달받은 값 사용)
			, #{reply_re_lev} + 1          -- 들여쓰기레벨(reply_re_lev)(전달받은 값 + 1)
			, #{result.reply_re_seq} + 1   -- 순서번호(reply_re_seq)(selectKey 로 조회된 값 + 1)
			, now()                        -- reply_date
		);
	</insert>
	
	
</mapper>














